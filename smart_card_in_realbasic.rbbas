#tag ModuleProtected Module mSmartCard	#tag Method, Flags = &h0		Function Smart_CanSendCommand() As Boolean		  		  Return ( bPortIsOpen and not InProcess and not CardError)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Smart_Close(ss As serial)		  		  ss.Close // close the serial port		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_ConvertToASCII(sData As string) As string		  		  Dim s, sASCII As String		  Dim n, nASCII As Integer		  		  if sData <> "" then		    For n = 1 to Len( sData) Step 2		      s = Mid( sData, n, 2)		      nASCII = aHex.IndexOf( s)		      if nASCII >= 0 then // found in hex array		        sASCII = sASCII + Chr( nASCII)		      end if // found in hex array		    Next		  end if		  		  Return sASCII		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_ConvertToHex(n As integer, nPlaces As integer = 4) As string		  		  Dim s As String		  Dim m, nLength As Integer		  		  s = Hex( n)		  nLength = Len( s)		  		  if nLength < nPlaces then		    For m = 1 to nPlaces - nLength		      s = "0"+ s		    Next		  end if		  		  Return s		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_ConvertToHex(sData As string) As string		  		  Dim s, sHex As String		  Dim n As Integer		  		  if sData <> "" then		    For n = 1 to Len( sData)		      s = Hex( Asc( Mid( sData, n, 1)) )		      if Len( s) = 1 then		        sHex = sHex + "0" + s		      else		        sHex = sHex + s		      end if		    Next		  end if		  		  Return sHex		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_Erase(ss As Serial) As boolean		  		  Dim isWritten As Boolean		  Dim s, sWrite, sNthByteHex, sNoOfBytesHex As String		  Dim n, nLength, nthByte As Integer		  		  nLength = 1020 // max length supported by 1		  if Smart_CanSendCommand() then // can send		    s = Smart_GetAnswer( ss, kCommand_SetFor1K)		    if s = kAnswer_Success then // set device		      		      isWritten = True // default, we assume a good luck		      nthByte = 8		      While n < nLength // until we have written all data		        if 1020 - nthByte > 120 then		          sWrite = StringReplicate( Chr(255), 120) // take next 120 characters		        else		          sWrite = StringReplicate( "00", 1020 - nthByte) // only left over places		        end if		        		        if sWrite <> "" then // any further data		          		          sNthByteHex = Smart_ConvertToHex( nthByte) // on which nth byte, as hex four places		          sNoOfBytesHex = Smart_ConvertToHex( Len( sWrite), 2) // length of data as hex 2 places		          sWrite = Smart_ConvertToHex( sWrite)		          s = kCommand_Write + sNthByteHex + sNoOfBytesHex + "5555"+ sWrite +"!"		          s = Smart_GetAnswer( ss, s)		          if s = kAnswer_DeviceNotSelected then		            MsgBox "Device not selected"		            isWritten = False		            Exit		          ElseIf s = kAnswer_InvalidDataLength then		            MsgBox "Invalid data length"		            isWritten = False		            Exit		          ElseIf s = kAnswer_InvalidSecurityCode then		            MsgBox "Invalid security code"		            isWritten = false		            Exit		          Else		            // nothing to report		            // Smart_Status( "Written "+ Str( nLength) +" bytes")		          end if		          		        else // any further data		          Exit // no further data to write		        end if // anyfurther data		        		        n = n + 120 // 120 bytes written		      Wend // until er have written all data		    end if // set device		  end if // can send		  		  Return isWritten		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_GetAnswer(ss As Serial, s As string) As string		  		  if s <> "" and CardError = false then		    Smart_Send( ss, s)		    Smart_Wait() // until the serial port is not inProcess		  end if		  		  Return sAnswer		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Smart_InitASCIIHexTable()		  		  Dim n As Integer		  Dim s As String		  		  Redim aHex( 128)		  		  For n = 0 to 127		    s = Hex( n)		    if Len( s) = 1 then		      s = "0" + s		    end if		    aHex( n) = s // hex x00 value		  Next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_InitFor1kCard(ss As Serial) As Boolean		  		  Dim s As String		  		  if Smart_CanSendCommand() then		    s = Smart_GetAnswer( ss, kCommand_SetFor1K)		    'Smart_Send( "#0206!")		    'Smart_Wait() // until the serial port is not inProcess		    'if sAnswer = "#83!" then		  end if		  		  Return ( Right( s, 4) = kAnswer_Success)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_IsCardPresent(ss As Serial) As Boolean		  		  Dim s As String		  		  if Smart_CanSendCommand() then		    s = Smart_GetAnswer( ss, kCommand_CheckCard)		  end if		  		  Return (s = kAnswer_CardPresent)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_OpenPort(ss As Serial) As Boolean		  		  Dim n As Integer		  		  For n = 0 to System.SerialPortCount-1 // try for serial ports available on system		    nPort = n // trying this port number		    		    ss.Baud = 9600 // settings for port communication		    ss.Bits = 3		    ss.CTS = False		    ss.DTR = False		    ss.Parity = 0		    //ss.Port = nPort		    ss.SerialPort =  System.SerialPort( nport)		    ss.Stop = 0		    if ss.Open then		      bPortIsOpen = True		      Exit		    Else		      bPortIsOpen = False		    end if		  Next		  		  InProcess = False		  Smart_Wait( 1000) // just give a chance for answer		  		  Return bPortIsOpen		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_Read(ss As Serial) As string		  		  Dim isRead As Boolean		  Dim s, sRead, sNthByteHex, sNoOfBytesHex As String		  Dim nLength, nthByte As Integer		  		  if Smart_CanSendCommand() then // can send		    s = Smart_GetAnswer( ss, kCommand_SetFor1K)		    if s = kAnswer_Success then // set device		      		      isRead = True // we assume, good luck		      nLength = 1020 // max		      nthByte = 8		      While nthByte < nLength // until we have written all data		        		        app.DoEvents 100 // timy pause		        sNthByteHex = Smart_ConvertToHex( nthByte) // on which nth byte, as hex four places		        sNoOfBytesHex = Smart_ConvertToHex( 120, 2) // length of data as hex 2 places		        s = Smart_GetAnswer( ss, kCommand_Read + sNthByteHex + sNoOfBytesHex +"!")		        if Left( s, 9) = kAnswer_ReadSuccess + sNthByteHex + sNoOfBytesHex then // read success		          sRead = sRead + s + chr(13) // add to the cumulative data		          // CR is required because every read will have extra #87AAAANN prefix & ! suffix		          		        else // read success		          if s = kAnswer_DeviceNotSelected then		            MsgBox "Device not selected"		            isRead = False		            Exit		          ElseIf s = kAnswer_InvalidDataLength then		            MsgBox "Invalid data length"		            isRead = False		            Exit		          ElseIf s = kAnswer_InvalidSecurityCode then		            MsgBox "Invalid security code"		            isRead = false		            Exit		          Else		            // nothing to report		            // Smart_Status( "Written "+ Str( nLength) +" bytes")		          end if		        end if // read success		        		        nthByte = nthByte + 120 // 120 bytes written		      Wend // until er have written all data		    end if // set device		  end if // can send		  		  Return sRead		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Smart_Send(ss As Serial, s As string)		  		  // send command to smart card		  sAnswer = "" // read for new answer		  InProcess = True		  if s <> "" then		    ss.Write s		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Smart_Wait(n As integer = 100)		  		  Dim d1, d2 As Date		  		  d1 = new Date		  While InProcess		    d2 = new Date		    if d2.TotalSeconds - d1.TotalSeconds > 5 then // wait max 5 seconds		      Exit		    end if		    App.DoEvents n // sleep for 1 second and allow event to happen		  Wend		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Smart_Write(ss As Serial, sData As string) As boolean		  		  Dim isWritten As Boolean		  Dim s, sWrite, sNthByteHex, sNoOfBytesHex As String		  Dim n, nLength, nthByte As Integer		  		  nLength = Len( sData)		  if nLength > 1020 then		    nLength = 1020 // max length supported by 1		  end if		  if nLength > 0 and Smart_CanSendCommand() then // can send		    s = Smart_GetAnswer( ss, kCommand_SetFor1K)		    if s = kAnswer_Success then // set device		      		      isWritten = True // default, we assume a good luck		      nthByte = 8		      While n < nLength // until we have written all data		        sWrite = Mid( sData, n, 120) // take next 120 characters		        if sWrite <> "" then // any further data		          		          sNthByteHex = Smart_ConvertToHex( nthByte) // on which nth byte, as hex four places		          sNoOfBytesHex = Smart_ConvertToHex( Len( sWrite), 2) // length of data as hex 2 places		          sWrite = Smart_ConvertToHex( sWrite)		          s = kCommand_Write + sNthByteHex + sNoOfBytesHex + "5555"+ sWrite +"!"		          s = Smart_GetAnswer( ss, s)		          if s = kAnswer_DeviceNotSelected then		            MsgBox "Device not selected"		            isWritten = False		            Exit		          ElseIf s = kAnswer_InvalidDataLength then		            MsgBox "Invalid data length"		            isWritten = False		            Exit		          ElseIf s = kAnswer_InvalidSecurityCode then		            MsgBox "Invalid security code"		            isWritten = false		            Exit		          Else		            // nothing to report		            // Smart_Status( "Written "+ Str( nLength) +" bytes")		          end if		          		        else // any further data		          Exit // no further data to write		        end if // anyfurther data		        		        n = n + 120 // 120 bytes written		      Wend // until er have written all data		    end if // set device		  end if // can send		  		  Return isWritten		  		End Function	#tag EndMethod	#tag Property, Flags = &h0		aHex(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		bPortIsOpen As boolean	#tag EndProperty	#tag Property, Flags = &h0		CardError As boolean	#tag EndProperty	#tag Property, Flags = &h0		InProcess As boolean	#tag EndProperty	#tag Property, Flags = &h0		nPort As integer	#tag EndProperty	#tag Property, Flags = &h0		sAnswer As string	#tag EndProperty	#tag Constant, Name = kAnswer_CardIsAbsent, Type = String, Dynamic = False, Default = \"#81!", Scope = Public	#tag EndConstant	#tag Constant, Name = kAnswer_CardPresent, Type = String, Dynamic = False, Default = \"#80!", Scope = Public	#tag EndConstant	#tag Constant, Name = kAnswer_DeviceNotSelected, Type = String, Dynamic = False, Default = \"#82!", Scope = Public	#tag EndConstant	#tag Constant, Name = kAnswer_InvalidDataLength, Type = String, Dynamic = False, Default = \"#85!", Scope = Public	#tag EndConstant	#tag Constant, Name = kAnswer_InvalidSecurityCode, Type = String, Dynamic = False, Default = \"#89!", Scope = Public	#tag EndConstant	#tag Constant, Name = kAnswer_ReadSuccess, Type = String, Dynamic = False, Default = \"#87", Scope = Public	#tag EndConstant	#tag Constant, Name = kAnswer_Success, Type = String, Dynamic = False, Default = \"#83!", Scope = Public	#tag EndConstant	#tag Constant, Name = kCommand_ChangeSecurityCode, Type = String, Dynamic = False, Default = \"#53", Scope = Public	#tag EndConstant	#tag Constant, Name = kCommand_CheckCard, Type = String, Dynamic = False, Default = \"#01!", Scope = Public	#tag EndConstant	#tag Constant, Name = kCommand_Read, Type = String, Dynamic = False, Default = \"#10", Scope = Public	#tag EndConstant	#tag Constant, Name = kCommand_SetFor1K, Type = String, Dynamic = False, Default = \"#0206!", Scope = Public	#tag EndConstant	#tag Constant, Name = kCommand_Write, Type = String, Dynamic = False, Default = \"#11", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="bPortIsOpen"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="CardError"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="InProcess"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="nPort"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="sAnswer"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule